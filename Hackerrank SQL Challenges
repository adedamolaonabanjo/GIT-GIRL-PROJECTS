--Query the names of all American cities in CITY with populations larger than 120000. The CountryCode for America is USA--
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000

--Query all columns (attributes) for every row in the CITY table--
SELECT * FROM CITY

--Query all columns for a city in CITY with the ID 1661--
SELECT * FROM CITY WHERE ID = 1661

--Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN--
SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN'

--Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN--
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN'

--Query a list of CITY and STATE from the STATION table--
SELECT CITY, STATE FROM STATION

--Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer--
SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0

--find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table--
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION

--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically--
SELECT DISTINCT CITY, LENGTH(CITY) FROM STATION
ORDER BY 2 DESC
LIMIT 1;
SELECT DISTINCT CITY, LENGTH(CITY) FROM STATION
ORDER BY 2 ASC
LIMIT 1

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP '^[aeiou]'

--Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE '%a'
OR CITY LIKE '%e'
OR CITY LIKE '%i'
OR CITY LIKE '%o'
OR CITY LIKE '%u';

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE (CITY LIKE 'a%'
    OR CITY LIKE 'e%'
    OR CITY LIKE 'i%'
    OR CITY LIKE 'o%'
    OR CITY LIKE 'u%'
) AND (CITY LIKE '%a'
    OR CITY LIKE '%e'
    OR CITY LIKE '%i'
    OR CITY LIKE '%o'
    OR CITY LIKE '%u'
)

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT REGEXP '^[aeiou]'
ORDER BY CITY ASC;

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT REGEXP '[aeiou]$'
ORDER BY CITY ASC;

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT REGEXP '^[aeiou]' OR CITY NOT REGEXP '[aeiou]$'
ORDER BY CITY ASC;

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates--
SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT REGEXP '^[aeiou]' AND CITY NOT REGEXP '[aeiou]$'
ORDER BY CITY ASC;

--THE SUBSTRING FUNCTION (COMES IN THE ORDER BY CLAUSE) - Extracts a substring from a string according to the position indicated and returns the number of characters specified E.G (start at position 5, extract 3 characters: SELECT SUBSTR("SQL Tutorial", 5, 3) AS ExtractString;

--Query the Name of any student in STUDENTS who scored higher than Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID--
SELECT Name FROM STUDENTS
WHERE Marks > 75
ORDER BY SUBSTR(Name,-3) ASC, ID ASC;

--Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order--
SELECT name FROM EMPLOYEE
ORDER BY name ASC

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id--
SELECT name FROM EMPLOYEE
WHERE salary > 2000
AND months < 10
ORDER BY employee_id ASC


-- You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.

If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed.

Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. If there is more than one project that have the same number of completion days, then order by the start date of the project.


--You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table. If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed. Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. If there is more than one project that have the same number of completion days, then order by the start date of the project--

SELECT Start_Date, MIN(End_Date)
FROM (SELECT Start_Date FROM Projects WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)) a, (SELECT End_Date FROM Projects WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)) b
WHERE Start_Date < End_Date
GROUP BY Start_Date
ORDER BY DATEDIFF(MIN(End_Date), Start_Date) ASC, Start_Date ASC

--You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month). Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer--
SELECT
    students.name
FROM students
JOIN packages ON students.id = packages.id
JOIN friends ON students.id = friends.id
JOIN packages fp ON friends.friend_id = fp.id
WHERE fp.salary > packages.salary
ORDER BY fp.salary

--Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table: Equilateral: It's a triangle with sides of equal length.
Isosceles: It's a triangle with sides of equal length.
Scalene: It's a triangle with sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle --
Select
    CASE WHEN A + B <= C OR A + C <= B OR B + C <= A then 'Not A Triangle'
         WHEN A = B AND B = C then 'Equilateral'
         WHEN A = B OR A = C OR B = C then 'Isosceles'
         ELSE 'Scalene'
    END
FROM TRIANGLES;

-- Query first letter of each profession as a parenthetical (i.e.: enclosed in parentheses) and concatenate--
concat("(", left(occupation,1), ")")
Select concat("There are a total of ", " ", count(Occupation)," " , Occupation) from Occupations group by Occupation order by count(occupation);

--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S). Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: There are a total of [occupation_count] [occupation]s. where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically --
Select concat(name,"(", substring(occupation,1,1), ")") from occupations order by name asc;
Select concat("There are a total of ", " ", count(Occupation)," " , lower(Occupation), "s.") from Occupations
group by Occupation
order by count(Occupation), Occupation ASC;

--Query a count of the number of cities in CITY having a Population larger than 100,000--
SELECT COUNT(NAME) FROM CITY
WHERE POPULATION > 100000

--Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
Note: (1) The tables may contain duplicate records (2) The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2--
SELECT C.COMPANY_CODE, C.FOUNDER, COUNT(DISTINCT L.LEAD_MANAGER_CODE), COUNT(DISTINCT S.SENIOR_MANAGER_CODE), COUNT(DISTINCT M.MANAGER_CODE), COUNT(DISTINCT E.EMPLOYEE_CODE)
FROM COMPANY C
LEFT JOIN LEAD_MANAGER L
ON C.COMPANY_CODE = L.COMPANY_CODE
LEFT JOIN SENIOR_MANAGER S
ON C.COMPANY_CODE = S.COMPANY_CODE
LEFT JOIN MANAGER M
ON C.COMPANY_CODE = M.COMPANY_CODE
LEFT JOIN EMPLOYEE E
ON C.COMPANY_CODE = E.COMPANY_CODE
GROUP BY C.COMPANY_CODE, C.FOUNDER
ORDER BY C.COMPANY_CODE ASC;

--Query the total population of all cities in CITY where District is California--
SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California'

--You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N. Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node: (1) Root: If node is root node (2) Leaf: If node is leaf node (3) Inner: If node is neither root nor leaf node--
SELECT N,
CASE WHEN P IS NULL THEN 'Root'
WHEN (SELECT COUNT(*) FROM BST WHERE P=B.N) >0 THEN 'Inner'
ELSE 'Leaf' END
FROM BST AS B
ORDER BY N;

--Query the average population of all cities in CITY where District is California--
SELECT AVG(POPULATION) FROM CITY
WHERE DISTRICT = 'California'

--Query the average population for all cities in CITY, rounded down to the nearest integer--
SELECT ROUND(AVG(POPULATION)) FROM CITY;

--Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN--
SELECT SUM(POPULATION) FROM CITY
WHERE COUNTRYCODE = 'JPN'

--Query the difference between the maximum and minimum populations in CITY--
SELECT MAX(POPULATION) - MIN(POPULATION) FROM CITY

--CEILING() FUNCTION RETURNS AN INTEGER THAT IS GREATER THAN OR EQUAL TO THE NUMBER IN THE PARENTHESES --

--Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary. Write a query calculating the amount of error (i.e. actual - miscalculated average monthly salaries), and round it up to the next integer.
SELECT CEILING(AVG(Salary) - AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;

--We define an employee's total earnings to be their monthly (SALARY * MONTHS) worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as space-separated integers--
SELECT (MONTHS * SALARY) AS MAX_TOT_EARNINGS, COUNT(*)
FROM EMPLOYEE
GROUP BY 1 DESC
LIMIT 1;

--Query the following two values from the STATION table: (1) The sum of all values in LAT_N rounded to a scale of 2 decimal places (2) The sum of all values in LONG_W rounded to a scale of
2 decimal places--
select ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2) from STATION

--Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places--
SELECT TRUNCATE(SUM(LAT_N),4) FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345

--Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places--
SELECT TRUNCATE(MAX(LAT_N),4) FROM STATION
WHERE LAT_N < 137.2345

--Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places--
SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1

--Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'. Note: CITY.CountryCode and COUNTRY.Code are matching key columns--
SELECT SUM(CITY.POPULATION) FROM CITY
INNER JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'Asia'

--Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'--
SELECT CITY.NAME FROM CITY
INNER JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'Africa'

--Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer--
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION)) FROM CITY
INNER JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
                                    GROUP BY COUNTRY.CONTINENT;

--P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* * * * *
* * * *
* * *
* *
*
Write a query to print the pattern P(20)--
SET @S='* ', @N=21;
SELECT REPEAT(@S, @N:=@N-1) AS R
FROM INFORMATION_SCHEMA.TABLES
ORDER BY R DESC

--You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks. Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order. Write a query to help Eve--
SELECT STUDENTS.NAME, GRADES.GRADE, STUDENTS.MARKS
FROM STUDENTS
JOIN GRADES
ON STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK
WHERE GRADES.GRADE > 7
ORDER BY 2 DESC, 1 ASC;
SELECT NULL, GRADES.GRADE, STUDENTS.MARKS
FROM STUDENTS
JOIN GRADES
ON STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK
WHERE GRADES.GRADE <= 7
ORDER BY 2 DESC, 3 ASC;

--COALESCE : THIS RETURNS THE FIRST NON-NULL VALUE IN A LIST--

--Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result--
SELECT h.hacker_id,
       h.name,
       COUNT(c.challenge_id) AS c_count
FROM Hackers h
JOIN Challenges c
ON c.hacker_id = h.hacker_id
GROUP BY h.hacker_id, h.name
HAVING c_count =
    (SELECT COUNT(c2.challenge_id) AS c_max
     FROM challenges as c2
     GROUP BY c2.hacker_id
     ORDER BY c_max DESC limit 1)
OR c_count IN
    (SELECT DISTINCT c_compare AS c_unique
     FROM (SELECT h2.hacker_id,
                  h2.name,
                  COUNT(challenge_id) AS c_compare
           FROM Hackers h2
           JOIN Challenges c ON c.hacker_id = h2.hacker_id
           GROUP BY h2.hacker_id, h2.name) counts
     GROUP BY c_compare
     HAVING COUNT(c_compare) = 1)
ORDER BY c_count DESC, h.hacker_id;

--Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id--
SELECT h.hacker_id, h.name
    FROM submissions s
    JOIN challenges c
        ON s.challenge_id = c.challenge_id
    JOIN difficulty d
        ON c.difficulty_level = d.difficulty_level
    JOIN hackers h
        ON s.hacker_id = h.hacker_id
    WHERE s.score = d.score
        AND c.difficulty_level = d.difficulty_level
    GROUP BY h.hacker_id, h.name
    HAVING COUNT(s.hacker_id) > 1
    ORDER BY COUNT(s.hacker_id) DESC, s.hacker_id ASC

--Query all columns for all American cities in CITY with populations larger than 100000. The CountryCode for America is USA--
SELECT * FROM CITY
WHERE COUNTRYCODE = 'USA'
AND POPULATION > 100000

--You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too! The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result--
select hacker_id, name, sum(max_score) as total_score
from (select h.hacker_id, name, s.challenge_id, max(s.score) as max_score from Hackers h join Submissions s on h.hacker_id = s.hacker_id group by h.hacker_id, name, s.challenge_id) t
group by hacker_id, name
having total_score > 0
order by total_score desc, hacker_id;

--Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand. Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age--
SELECT id,
    (SELECT age FROM Wands_Property WHERE code = w.code) AS age,
    coins_needed,
    power
FROM Wands w
WHERE w.code IN
    (SELECT code FROM Wands_Property WHERE is_evil = 0)
AND coins_needed =
    (SELECT MIN(coins_needed) FROM Wands
     WHERE code = w.code AND power = w.power)
ORDER BY power DESC, age DESC;

--You are given a table, Functions, containing two columns: X and Y. Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1. Write a query to output all such symmetric pairs in ascending order by the value of X--
select f1.x, f1.y from functions as f1
inner join functions as f2 on f2.y = f1.x
where f1.y >= f1.x and f2.x = f1.y
group by f1.x, f1.y
having count(*) > 1 or (count(*) = 1 and f1.y != f1.x)
order by f1.x

--Consider and to be two points on a 2D plane where are the respective minimum and maximum values of Northern Latitude (LAT_N) and are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION. Query the Euclidean Distance between points and and format your answer to display decimal digits--
select round( SQRT( power(max(long_w) - min(long_w), 2) + power(max(lat_n) -min(lat_n),2) ) ,4) from station;
